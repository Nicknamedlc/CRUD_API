Subject: [PATCH] Terminado os CRUD's iniciais, e uma adição de tema da ide
metodo PUT criado
Merge remote-tracking branch 'origin/master'
Arrumado os problemas (tava confundindo resposta com possivel resposta) e criado o post com mais clareza
Arrumado os problemas (tava confundindo resposta com possivel resposta) e criado o post com mais clareza
Primeira parte para arrumar as validações
Finalização do modulo inicial de web
Finalização do modulo inicial de web
Initial commit
---
Index: app.py
===================================================================
diff --git a/app.py b/app.py
new file mode 100644
--- /dev/null	(revision 98cf004ff722818ea2c6d9a3291e26222391396a)
+++ b/app.py	(revision 98cf004ff722818ea2c6d9a3291e26222391396a)
@@ -0,0 +1,80 @@
+import http
+from http import HTTPStatus
+
+from fastapi import FastAPI, HTTPException
+from fastapi.responses import HTMLResponse
+
+from fast_zero.schemas import Message, UserDB, UserList, UserPublic, UserSchema
+
+app = FastAPI(title='API dos sonhos!')
+database = []
+
+
+@app.get('/', status_code=http.HTTPStatus.OK, response_model=Message)
+def read_root():
+    return {'message': 'Olá Mundo'}
+
+
+@app.get('/olamundo/', response_class=HTMLResponse)
+def say_hello():
+    return """
+    <html>
+      <head>
+        <title>Olá mundo!</title>
+      </head>
+      <body>
+        <h1> Olá Mundo </h1>
+        <h2> Hoje é um novo dia</h2>
+      </body>
+    </html>"""
+
+
+@app.post(
+    '/users/', status_code=http.HTTPStatus.CREATED, response_model=UserPublic
+)
+def create_user(user: UserSchema):
+    user_id = UserDB(**user.model_dump(), id=len(database) + 1)
+    database.append(user_id)
+    return user_id
+
+
+@app.get('/users/', status_code=http.HTTPStatus.OK, response_model=UserList)
+def read_user():
+    return {'users': database}
+
+
+@app.put(
+    '/users/{user_id}', status_code=HTTPStatus.OK, response_model=UserPublic
+)
+def update_user(user_id: int, user: UserSchema):
+    if user_id > len(database) or user_id < 1:
+        raise HTTPException(
+            status_code=http.HTTPStatus.NOT_FOUND, detail='User not found'
+        )
+    user_with_id = UserDB(**user.model_dump(), id=user_id)
+    database[user_id - 1] = user_with_id
+    return user_with_id
+
+
+@app.delete(
+    '/users/{user_id}', status_code=HTTPStatus.OK, response_model=UserPublic
+)
+def delete_user(user_id: int):
+    if user_id > len(database) or user_id < 1:
+        raise HTTPException(
+            status_code=http.HTTPStatus.NOT_FOUND, detail='User not found'
+        )
+    return database.pop(user_id - 1)
+
+
+@app.get(
+    '/users/{user_id}',
+    status_code=http.HTTPStatus.OK,
+    response_model=UserPublic,
+)
+def read_user_by_id(user_id: int):
+    if user_id > len(database) or user_id < 1:
+        raise HTTPException(
+            status_code=http.HTTPStatus.NOT_FOUND, detail='User not found'
+        )
+    return database[user_id - 1]
Index: fast_zero/schemas.py
===================================================================
diff --git a/fast_zero/schemas.py b/fast_zero/schemas.py
new file mode 100644
--- /dev/null	(revision ae84bba0d368944518788e2ce095fbc2e3086e78)
+++ b/fast_zero/schemas.py	(revision ae84bba0d368944518788e2ce095fbc2e3086e78)
@@ -0,0 +1,25 @@
+from pydantic import BaseModel, EmailStr
+
+
+class Message(BaseModel):
+    message: str
+
+
+class UserPublic(BaseModel):
+    username: str
+    email: EmailStr
+    id: int
+
+
+class UserSchema(BaseModel):
+    username: str
+    email: EmailStr
+    password: str
+
+
+class UserDB(UserSchema):
+    id: int
+
+
+class UserList(BaseModel):
+    users: list[UserPublic]
Index: pyproject.toml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pyproject.toml b/pyproject.toml
new file mode 100644
--- /dev/null	(revision 98cf004ff722818ea2c6d9a3291e26222391396a)
+++ b/pyproject.toml	(revision 98cf004ff722818ea2c6d9a3291e26222391396a)
@@ -0,0 +1,28 @@
+[infos]
+nome = "FastZero"
+desc = "Montando um fast api"
+
+[tool.ruff]
+line-length = 79
+extend-exclude = ['migrations']
+
+[tool.ruff.lint]
+preview = true
+select = ['I', 'F', 'E', 'W', 'PL', 'PT']
+
+[tool.ruff.format]
+preview = true
+quote-style = 'single'
+
+[tool.pytest.ini_options]
+pythonpath = "."
+addopts = '-p no:warnings'
+
+[tool.taskipy.tasks]
+lint = 'ruff check'
+pre_format = 'ruff check --fix'
+format = 'ruff format'
+run = 'fastapi dev fast_zero/app.py'
+pre_test = 'task lint'
+test = 'pytest -s -x --cov'
+post_test = 'coverage html'
Index: test_app.py
===================================================================
diff --git a/test_app.py b/test_app.py
deleted file mode 100644
--- a/test_app.py	(revision 92ab8c5a539a26aff75eb5570635a0065db07fee)
+++ /dev/null	(revision 92ab8c5a539a26aff75eb5570635a0065db07fee)
@@ -1,19 +0,0 @@
-from http import HTTPStatus
-
-from starlette.testclient import TestClient
-
-import app
-
-
-def test_root():
-    client = TestClient(app.app)
-    response = client.get('/')
-    assert response.status_code == 200
-    assert response.json() == {'message': 'Hello World'}
-
-
-def test_say_hello():
-    client = TestClient(app.app)
-    response = client.get('/olamundo')
-    assert response.status_code == HTTPStatus.OK
-    assert '<h1> Olá Mundo </h1>' in response.text
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(revision 08581e33247f6a2a2c33a334e99b6ae81f8eecf3)
+++ b/.idea/.gitignore	(revision 08581e33247f6a2a2c33a334e99b6ae81f8eecf3)
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
Index: .idea/FastZero.iml
===================================================================
diff --git a/.idea/FastZero.iml b/.idea/FastZero.iml
new file mode 100644
--- /dev/null	(revision 08581e33247f6a2a2c33a334e99b6ae81f8eecf3)
+++ b/.idea/FastZero.iml	(revision 08581e33247f6a2a2c33a334e99b6ae81f8eecf3)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/.venv" />
+    </content>
+    <orderEntry type="jdk" jdkName="Python 3.13 (FastZero)" jdkType="Python SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(revision 08581e33247f6a2a2c33a334e99b6ae81f8eecf3)
+++ b/.idea/inspectionProfiles/profiles_settings.xml	(revision 08581e33247f6a2a2c33a334e99b6ae81f8eecf3)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(revision 08581e33247f6a2a2c33a334e99b6ae81f8eecf3)
+++ b/.idea/misc.xml	(revision 08581e33247f6a2a2c33a334e99b6ae81f8eecf3)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Black">
+    <option name="sdkName" value="Python 3.13 (FastZero) (2)" />
+  </component>
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.13 (FastZero)" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(revision 08581e33247f6a2a2c33a334e99b6ae81f8eecf3)
+++ b/.idea/modules.xml	(revision 08581e33247f6a2a2c33a334e99b6ae81f8eecf3)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/FastZero.iml" filepath="$PROJECT_DIR$/.idea/FastZero.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(revision 08581e33247f6a2a2c33a334e99b6ae81f8eecf3)
+++ b/.idea/vcs.xml	(revision 08581e33247f6a2a2c33a334e99b6ae81f8eecf3)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: fast_zero/test_app.py
===================================================================
diff --git a/fast_zero/test_app.py b/fast_zero/test_app.py
new file mode 100644
--- /dev/null	(revision ae84bba0d368944518788e2ce095fbc2e3086e78)
+++ b/fast_zero/test_app.py	(revision ae84bba0d368944518788e2ce095fbc2e3086e78)
@@ -0,0 +1,49 @@
+from http import HTTPStatus
+
+from fastapi.testclient import TestClient
+
+from app import app
+
+
+class TestApp:
+    import pytest
+    @pytest.fixture
+    def client(self):
+        return TestClient(app)
+
+    def test_root(self, client):
+        response = client.get("/")
+        assert response.status_code == HTTPStatus.OK
+        assert response.json() == {"message": "Olá Mundo"}
+
+    def test_say_hello(self, client):
+        response = client.get("/olamundo")
+        assert response.status_code == HTTPStatus.OK
+        assert '<h1> Olá Mundo </h1>' in response.text
+
+    def test_create_user(self, client):
+        response = client.post("/users", json={
+            "username": "string",
+            "email": "user@example.com",
+            "password": "string"
+        })
+        assert response.status_code == HTTPStatus.CREATED
+        assert response.json() == {
+            "id": 1,
+            "email": "user@example.com",
+            "username": "string",
+        }
+
+    def test_read_users(self, client):
+        response = client.get("/users/")
+        assert response.status_code == HTTPStatus.OK
+        assert response.json() == {
+
+            'users': [
+                {
+                    'username': 'string',
+                    'email': 'user@example.com',
+                    'id': 1
+                }
+            ]
+        }
Index: fast_zero/test_app.py
===================================================================
diff --git a/fast_zero/test_app.py b/fast_zero/test_app.py
new file mode 100644
--- /dev/null	(revision 98cf004ff722818ea2c6d9a3291e26222391396a)
+++ b/fast_zero/test_app.py	(revision 98cf004ff722818ea2c6d9a3291e26222391396a)
@@ -0,0 +1,102 @@
+from http import HTTPStatus
+
+import pytest
+from fastapi.testclient import TestClient
+
+from app import app
+
+
+@pytest.fixture
+def client():
+    return TestClient(app)
+
+
+def test_root(client):
+    response = client.get('/')
+    assert response.status_code == HTTPStatus.OK
+    assert response.json() == {'message': 'Olá Mundo'}
+
+
+def test_say_hello(client):
+    response = client.get('/olamundo')
+    assert response.status_code == HTTPStatus.OK
+    assert '<h1> Olá Mundo </h1>' in response.text
+
+
+def test_create_user(client):
+    response = client.post(
+        '/users',
+        json={
+            'username': 'string',
+            'email': 'user@example.com',
+            'password': 'string',
+        },
+    )
+    assert response.status_code == HTTPStatus.CREATED
+    assert response.json() == {
+        'id': 1,
+        'email': 'user@example.com',
+        'username': 'string',
+    }
+
+
+def test_read_users(client):
+    response = client.get('/users/')
+    assert response.status_code == HTTPStatus.OK
+    assert response.json() == {
+        'users': [{'username': 'string', 'email': 'user@example.com', 'id': 1}]
+    }
+
+
+def test_update_user(client):
+    response = client.put(
+        '/users/1',
+        json={
+            'username': 'texto',
+            'email': 'texto@example.com',
+            'password': 'texto',
+        },
+    )
+
+    assert response.status_code == HTTPStatus.OK
+    assert response.json() == {
+        'username': 'texto',
+        'email': 'texto@example.com',
+        'id': 1,
+    }
+    response = client.put(
+        '/users/0',
+        json={
+            'username': 'texto',
+            'email': 'texto@email.com',
+            'password': 'texto',
+        },
+    )
+    assert response.status_code == HTTPStatus.NOT_FOUND
+    assert response.json() == {'detail': 'User not found'}
+
+
+def test_read_user_by_id(client):
+    response = client.get('/users/1')
+    assert response.status_code == HTTPStatus.OK
+    assert response.json() == {
+        'username': 'texto',
+        'email': 'texto@example.com',
+        'id': 1,
+    }
+    response = client.get('/users/0')
+    assert response.status_code == HTTPStatus.NOT_FOUND
+    assert response.json() == {'detail': 'User not found'}
+
+
+def test_delete_user(client):
+    response = client.delete('/users/1')
+    assert response.status_code == HTTPStatus.OK
+    assert response.json() == {
+        'username': 'texto',
+        'email': 'texto@example.com',
+        'id': 1,
+    }
+    response = client.delete('/users/0')
+    assert response.status_code == HTTPStatus.NOT_FOUND
+    assert response.json() == {'detail': 'User not found'}
Index: .idea/material_theme_project_new.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/material_theme_project_new.xml b/.idea/material_theme_project_new.xml
new file mode 100644
--- /dev/null	(revision 98cf004ff722818ea2c6d9a3291e26222391396a)
+++ b/.idea/material_theme_project_new.xml	(revision 98cf004ff722818ea2c6d9a3291e26222391396a)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="MaterialThemeProjectNewConfig">
+    <option name="metadata">
+      <MTProjectMetadataState>
+        <option name="migrated" value="true" />
+        <option name="pristineConfig" value="false" />
+        <option name="userId" value="-182870f9:19711e71ff0:-7ffe" />
+      </MTProjectMetadataState>
+    </option>
+  </component>
+</project>
\ No newline at end of file
diff --git a/.coverage b/.coverage
new file mode 100644
index 0000000000000000000000000000000000000000..82e46f5781275e03211cd5c5dc57e541c8194473
GIT binary patch
literal 53248
zc%1Fr?~5Bn7zgm#Oqz6a3ENUjIL>l|VDHZ660d!s_Fm|zClm{9wFsVII@wGvTeG|A
z?xxpx6uDL`2)<Mh#6QEgzR-6<)t4d&B1qp9k*ZYM7tZXD{J2YMTaok5?}ucw*_~(h
zncbP)+sox%J#*3u1Z%jS%>#Cf>?4{+o@0y<qRVH2^kwBUJ@8&5e@`dn_ns&iuaSJ_
z17f^cIAzS|KPeoZ_%?6r?@xT1<+>?X006-M+s2uEwm3PdUAY|aT1x~TH-#5X3opE~
zymWS%on3nV<T8tvvDqAx=I7ZG^V~JomWvuzOEAl+TP6=IXO#s_k(BQEqOLA<a+$o;
zse<J&Ud>glx{M0Msw~&`ESq~>_Lk_D!UA!8AT9;b0$GW$RvlG>&Boz#%o7da3C9$E
zl*O!En47!$PA*$Ka6r2z!ZvZwl#hv_*2o3@rkrTVicHt5tL$qYcg&{nON{qgXu6Kd
zBx<ea+Lgd%Ez1d;>G)P)xegPTgxLv1ePjbmY=GS2U~6Pu=Tz}?QDnTWk-;M(<Kl6!
zO3radZdC<`IXfM@CfjkoW4G18kr7dB;EszN7aO?c2Rt?-j%B~SLm|m7??-hU>q1BL
zHc%SaQ>D1!rLYmQ2RuHJDL!*RBeGYDOa6tH{CTU&JAoU%ugZg8U67OfyZiTMi__EE
zwF_ZKQBADYtibQh=tG^Rw|Gp~QR~O|8?_IHJBb=atrl||;gA{F!T#`=sU-DqPYpEY
z#sy_2+uGaW99XU8)<*OgUx=__NwG%9G1XA<RU1tAqVV{tD93C68y!h@odrEpT%I1+
zb$VT(y3m`=ZA@me#i=RniXL{OxVrcyJJf}G*=#+HCaY}0{f?LPk$asalZgIVGHF`8
zMmA?Yn<*|$jcZQQ@`ZS2??yJAEgn3mZA2qN?IQKuGt`LaD2%xf+<*FQ9yCYft`^J0
zXZB=@iwDOg9v-^|HO*XoBNe86Z8A*RmM4Anq(dpICH<6N7Tx)ayd}5R=9cHH(?&du
z!-91#3-g-W3BvxX-iDFkDCp%IRj@UGS!yoX&}rBAEt!-G^^Ye@*-VrB>MZ2Xu$t@2
zE0oh4G$(wyP0J5AI^wGIY`+e_tLj+2I1}bDIPlKOq?7R_XKb50_4s<FPAO5X>iiuy
zuH3Iw2KjP`ZmKh>G+wLDSiSMv?nbrRydDkr{#8D#ajhw~R2Qv#kq08MY{68KUMO4R
za?pB$ho{N88G5g7ppI5`K~2?N^4{<VnrSUtJaR<a=){9D%CqXr-DmSnZ&RBF=g`W2
ze>o+0o$Ta;{UjLP9qMfyWjXN?tVMevDHV@{+?=|>*Ni(vJ^%m!00000VE3U~O3SMI
z|CI3~F@BK~000000002kner)m$VmRg<4HrKQ^oj?0G=v8T|Sy4>i+)*F>V;YZ+EHy
z00000008jM<mn+T`7J;yN2m1omjLSXe`>r=j4zB2<qH4+0000006d7}l#=yI)3rtA
zJa;RnyJnMn_G!;OFU-KNyu|%rMR;zdA!n*@tGVba`+m9IEu|=_-bXBNw`J)?jgrd`
zw534ExhPnD{!fh+Vtiz*7+-GpP6Ge{00000*l8B&y7rLw|8$;K?<Y38g-<Qg%lgCK
z|KtDv0RR910002&YE+}7pg#ZCjJrfW000000001B7oxPFN8kVdh8Q=E@8t^s00000
z008U&I!$Z(BlPIk$LPM4oP8|y+0T!X_3J-;_tm<#UrX!y;g##R?*4iE_D^>{{`}Tj
z^!@*v#JFSpCSL#m000000AQ!fq%~cmG<->=(rH}}KmRBDwmUHZ00000008(msn7p$
s{|^8F00000u)9Uy|Nm9}{r?~G1poj500000b^}T&DbSRfsQ>@}7yFI8#{d8T

